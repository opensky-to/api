// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenSky.API;

namespace OpenSky.API.Migrations
{
    [DbContext(typeof(OpenSkyDbContext))]
    partial class OpenSkyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Aircraft", b =>
                {
                    b.Property<string>("Registry")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("AirlineOwnerID")
                        .IsConcurrencyToken()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("AirportICAO")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<double>("Fuel")
                        .HasColumnType("double");

                    b.Property<DateTime?>("FuellingUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LoadingUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OwnerID")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PurchasePrice")
                        .HasColumnType("int");

                    b.Property<int?>("RentPrice")
                        .HasColumnType("int");

                    b.Property<Guid>("TypeID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("WarpingUntil")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Registry");

                    b.HasIndex("AirlineOwnerID");

                    b.HasIndex("AirportICAO");

                    b.HasIndex("OwnerID");

                    b.HasIndex("TypeID");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.AircraftType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AtcModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AtcType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<bool>("DetailedChecksDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("EmptyWeight")
                        .HasColumnType("double");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EngineCount")
                        .HasColumnType("int");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<bool>("FlapsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("FuelTotalCapacity")
                        .HasColumnType("double");

                    b.Property<double>("FuelWeightPerGallon")
                        .HasColumnType("double");

                    b.Property<bool>("IncludeInWorldPopulation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGearRetractable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVanilla")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("IsVariantOf")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastEditedByID")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("MaxGrossWeight")
                        .HasColumnType("double");

                    b.Property<int>("MaxPayloadDeltaAllowed")
                        .HasColumnType("int");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("int");

                    b.Property<int>("MinPrice")
                        .HasColumnType("int");

                    b.Property<int>("MinimumRunwayLength")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("NeedsCoPilot")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NeedsFlightEngineer")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("NextVersion")
                        .HasColumnType("char(36)");

                    b.Property<bool>("RequiresManualFuelling")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("RequiresManualLoading")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Simulator")
                        .HasColumnType("int");

                    b.Property<string>("UploaderID")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IsVariantOf");

                    b.HasIndex("LastEditedByID");

                    b.HasIndex("NextVersion");

                    b.HasIndex("UploaderID");

                    b.ToTable("AircraftTypes");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Airline", b =>
                {
                    b.Property<string>("ICAO")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<long>("AccountBalance")
                        .HasColumnType("bigint");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("FounderID")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FoundingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IATA")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ICAO");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.AirlineShareHolder", b =>
                {
                    b.Property<string>("AirlineICAO")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("UserID")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Shares")
                        .HasColumnType("int");

                    b.HasKey("AirlineICAO", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("AirlineShareHolders");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.AirlineUserPermission", b =>
                {
                    b.Property<string>("AirlineICAO")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("UserID")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.HasKey("AirlineICAO", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("AirlineUserPermissions");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Airport", b =>
                {
                    b.Property<string>("ICAO")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("Altitude")
                        .HasColumnType("int");

                    b.Property<int?>("AtisFrequency")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GaRamps")
                        .HasColumnType("int");

                    b.Property<int>("Gates")
                        .HasColumnType("int");

                    b.Property<bool>("HasAvGas")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("HasBeenPopulated")
                        .HasColumnType("int");

                    b.Property<bool>("HasJetFuel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMilitary")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<int>("LongestRunwayLength")
                        .HasColumnType("int");

                    b.Property<string>("LongestRunwaySurface")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<bool>("MSFS")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PreviousSize")
                        .HasColumnType("int");

                    b.Property<int>("RunwayCount")
                        .HasColumnType("int");

                    b.Property<ulong>("S2Cell3")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("S2Cell4")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("S2Cell5")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("S2Cell6")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("S2Cell7")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("S2Cell8")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("S2Cell9")
                        .HasColumnType("bigint unsigned");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<bool>("SupportsSuper")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TowerFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("UnicomFrequency")
                        .HasColumnType("int");

                    b.HasKey("ICAO");

                    b.HasIndex("S2Cell3");

                    b.HasIndex("S2Cell4");

                    b.HasIndex("S2Cell5");

                    b.HasIndex("S2Cell6");

                    b.HasIndex("S2Cell7");

                    b.HasIndex("S2Cell8");

                    b.HasIndex("S2Cell9");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.AirportClientPackage", b =>
                {
                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PackageHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CreationTime");

                    b.ToTable("AirportClientPackages");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Approach", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("AirportICAO")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("RunwayName")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("ID");

                    b.HasIndex("AirportICAO");

                    b.ToTable("Approaches");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.DataImport", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("Finished")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImportDataSource")
                        .HasColumnType("longtext");

                    b.Property<string>("ImportStatusJson")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Started")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TotalRecordsProcessed")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("ID");

                    b.ToTable("DataImports");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.FinancialRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AirlineID")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Expense")
                        .HasColumnType("bigint");

                    b.Property<long>("Income")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ParentRecordID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserID")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("AirlineID");

                    b.HasIndex("ParentRecordID");

                    b.HasIndex("UserID");

                    b.ToTable("FinancialRecords");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Flight", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AircraftRegistry")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<double?>("AirspeedTrue")
                        .HasColumnType("double");

                    b.Property<string>("AlternateICAO")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("AlternateRoute")
                        .HasColumnType("longtext");

                    b.Property<double?>("Altitude")
                        .HasColumnType("double");

                    b.Property<string>("AssignedAirlinePilotID")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AutoSaveLog")
                        .HasColumnType("longtext");

                    b.Property<double>("BankAngle")
                        .HasColumnType("double");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DestinationICAO")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("DispatcherID")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DispatcherRemarks")
                        .HasColumnType("longtext");

                    b.Property<string>("FlightLog")
                        .HasColumnType("longtext");

                    b.Property<int>("FlightNumber")
                        .HasColumnType("int");

                    b.Property<int>("FlightPhase")
                        .HasColumnType("int");

                    b.Property<double?>("FuelGallons")
                        .HasColumnType("double");

                    b.Property<DateTime?>("FuelLoadingComplete")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("FuelTankCenter2Quantity")
                        .HasColumnType("double");

                    b.Property<double?>("FuelTankCenter3Quantity")
                        .HasColumnType("double");

                    b.Property<double?>("FuelTankCenterQuantity")
                        .HasColumnType("double");

                    b.Property<double?>("FuelTankExternal1Quantity")
                        .HasColumnType("double");

                    b.Property<double?>("FuelTankExternal2Quantity")
                        .HasColumnType("double");

                    b.Property<double?>("FuelTankLeftAuxQuantity")
                        .HasColumnType("double");

                    b.Property<double?>("FuelTankLeftMainQuantity")
                        .HasColumnType("double");

                    b.Property<double?>("FuelTankLeftTipQuantity")
                        .HasColumnType("double");

                    b.Property<double?>("FuelTankRightAuxQuantity")
                        .HasColumnType("double");

                    b.Property<double?>("FuelTankRightMainQuantity")
                        .HasColumnType("double");

                    b.Property<double?>("FuelTankRightTipQuantity")
                        .HasColumnType("double");

                    b.Property<double?>("GroundSpeed")
                        .HasColumnType("double");

                    b.Property<double?>("Heading")
                        .HasColumnType("double");

                    b.Property<string>("LandedAtICAO")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("LastAutoSave")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastPositionReport")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("OfpHtml")
                        .HasColumnType("longtext");

                    b.Property<bool>("OnGround")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OperatorAirlineID")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("OperatorID")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OriginICAO")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("Paused")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PayloadLoadingComplete")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("PitchAngle")
                        .HasColumnType("double");

                    b.Property<DateTime>("PlannedDepartureTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("RadioHeight")
                        .HasColumnType("double");

                    b.Property<string>("Route")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TimeWarpTimeSavedSeconds")
                        .HasColumnType("int");

                    b.Property<double>("UtcOffset")
                        .HasColumnType("double");

                    b.Property<double>("VerticalSpeedSeconds")
                        .HasColumnType("double");

                    b.HasKey("ID");

                    b.HasIndex("AircraftRegistry");

                    b.HasIndex("AlternateICAO");

                    b.HasIndex("AssignedAirlinePilotID");

                    b.HasIndex("DestinationICAO");

                    b.HasIndex("DispatcherID");

                    b.HasIndex("LandedAtICAO");

                    b.HasIndex("OperatorAirlineID");

                    b.HasIndex("OperatorID");

                    b.HasIndex("OriginICAO");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.FlightNavlogFix", b =>
                {
                    b.Property<Guid>("FlightID")
                        .HasColumnType("char(36)");

                    b.Property<int>("FixNumber")
                        .HasColumnType("int");

                    b.Property<string>("Ident")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FlightID", "FixNumber");

                    b.ToTable("FlightNavlogFixes");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.FlightPayload", b =>
                {
                    b.Property<Guid>("FlightID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PayloadID")
                        .HasColumnType("char(36)");

                    b.HasKey("FlightID", "PayloadID");

                    b.HasIndex("PayloadID");

                    b.ToTable("FlightPayloads");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Job", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AssignedAirlineDispatcherID")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OperatorAirlineID")
                        .IsConcurrencyToken()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("OperatorID")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OriginICAO")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserIdentifier")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AssignedAirlineDispatcherID");

                    b.HasIndex("OperatorAirlineID");

                    b.HasIndex("OperatorID");

                    b.HasIndex("OriginICAO");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.OpenSkyToken", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TokenGeo")
                        .HasColumnType("longtext");

                    b.Property<string>("TokenIP")
                        .HasColumnType("longtext");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("OpenSkyTokens");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.OpenSkyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AirlineICAO")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int?>("AirlineIncomeShare")
                        .HasColumnType("int");

                    b.Property<int?>("AirlineRank")
                        .HasColumnType("int");

                    b.Property<int?>("AirlineSalary")
                        .HasColumnType("int");

                    b.Property<string>("BingMapsKey")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastLoginGeo")
                        .HasColumnType("longtext");

                    b.Property<string>("LastLoginIP")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<long>("PersonalAccountBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("SimbriefUsername")
                        .HasColumnType("longtext");

                    b.Property<bool>("TokenRenewalCountryVerification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AirlineICAO");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Payload", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AircraftRegistry")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("AirportICAO")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DestinationICAO")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<Guid>("JobID")
                        .HasColumnType("char(36)");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("ID");

                    b.HasIndex("AircraftRegistry");

                    b.HasIndex("AirportICAO");

                    b.HasIndex("DestinationICAO");

                    b.HasIndex("JobID");

                    b.ToTable("Payloads");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Runway", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("AirportICAO")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("Altitude")
                        .HasColumnType("int");

                    b.Property<string>("CenterLight")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("EdgeLight")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Surface")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AirportICAO");

                    b.ToTable("Runways");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.RunwayEnd", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("ApproachLightSystem")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("HasClosedMarkings")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Heading")
                        .HasColumnType("double");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double?>("LeftVasiPitch")
                        .HasColumnType("double");

                    b.Property<string>("LeftVasiType")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("OffsetThreshold")
                        .HasColumnType("int");

                    b.Property<double?>("RightVasiPitch")
                        .HasColumnType("double");

                    b.Property<string>("RightVasiType")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("RunwayID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RunwayID");

                    b.ToTable("RunwayEnds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Aircraft", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Airline", "AirlineOwner")
                        .WithMany()
                        .HasForeignKey("AirlineOwnerID");

                    b.HasOne("OpenSky.API.DbModel.Airport", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportICAO")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("OpenSky.API.DbModel.AircraftType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirlineOwner");

                    b.Navigation("Airport");

                    b.Navigation("Owner");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.AircraftType", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.AircraftType", "VariantType")
                        .WithMany("Variants")
                        .HasForeignKey("IsVariantOf");

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "LastEditedBy")
                        .WithMany()
                        .HasForeignKey("LastEditedByID");

                    b.HasOne("OpenSky.API.DbModel.AircraftType", "NextVersionType")
                        .WithMany()
                        .HasForeignKey("NextVersion");

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastEditedBy");

                    b.Navigation("NextVersionType");

                    b.Navigation("Uploader");

                    b.Navigation("VariantType");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.AirlineShareHolder", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Airline", "Airline")
                        .WithMany("ShareHolders")
                        .HasForeignKey("AirlineICAO")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "User")
                        .WithMany("ShareHoldings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.AirlineUserPermission", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Airline", "Airline")
                        .WithMany("UserPermissions")
                        .HasForeignKey("AirlineICAO")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "User")
                        .WithMany("AirlinePermissions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Approach", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Airport", "Airport")
                        .WithMany("Approaches")
                        .HasForeignKey("AirportICAO")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.FinancialRecord", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Airline", "Airline")
                        .WithMany("FinancialRecords")
                        .HasForeignKey("AirlineID");

                    b.HasOne("OpenSky.API.DbModel.FinancialRecord", "ParentRecord")
                        .WithMany("ChildRecords")
                        .HasForeignKey("ParentRecordID");

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "User")
                        .WithMany("FinancialRecords")
                        .HasForeignKey("UserID");

                    b.Navigation("Airline");

                    b.Navigation("ParentRecord");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Flight", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Aircraft", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftRegistry");

                    b.HasOne("OpenSky.API.DbModel.Airport", "Alternate")
                        .WithMany()
                        .HasForeignKey("AlternateICAO");

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "AssignedAirlinePilot")
                        .WithMany("AirlinePilotAssignments")
                        .HasForeignKey("AssignedAirlinePilotID");

                    b.HasOne("OpenSky.API.DbModel.Airport", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationICAO");

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "Dispatcher")
                        .WithMany("Dispatches")
                        .HasForeignKey("DispatcherID");

                    b.HasOne("OpenSky.API.DbModel.Airport", "LandedAt")
                        .WithMany()
                        .HasForeignKey("LandedAtICAO");

                    b.HasOne("OpenSky.API.DbModel.Airline", "OperatorAirline")
                        .WithMany("Flights")
                        .HasForeignKey("OperatorAirlineID");

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "Operator")
                        .WithMany("Flights")
                        .HasForeignKey("OperatorID");

                    b.HasOne("OpenSky.API.DbModel.Airport", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginICAO");

                    b.Navigation("Aircraft");

                    b.Navigation("Alternate");

                    b.Navigation("AssignedAirlinePilot");

                    b.Navigation("Destination");

                    b.Navigation("Dispatcher");

                    b.Navigation("LandedAt");

                    b.Navigation("Operator");

                    b.Navigation("OperatorAirline");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.FlightNavlogFix", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Flight", "Flight")
                        .WithMany("NavlogFixes")
                        .HasForeignKey("FlightID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.FlightPayload", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Flight", "Flight")
                        .WithMany("FlightPayloads")
                        .HasForeignKey("FlightID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSky.API.DbModel.Payload", "Payload")
                        .WithMany("FlightPayloads")
                        .HasForeignKey("PayloadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Payload");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Job", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "AssignedAirlineDispatcher")
                        .WithMany("AirlineDispatcherAssignments")
                        .HasForeignKey("AssignedAirlineDispatcherID");

                    b.HasOne("OpenSky.API.DbModel.Airline", "OperatorAirline")
                        .WithMany()
                        .HasForeignKey("OperatorAirlineID");

                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "Operator")
                        .WithMany("Jobs")
                        .HasForeignKey("OperatorID");

                    b.HasOne("OpenSky.API.DbModel.Airport", "Origin")
                        .WithMany("Jobs")
                        .HasForeignKey("OriginICAO");

                    b.Navigation("AssignedAirlineDispatcher");

                    b.Navigation("Operator");

                    b.Navigation("OperatorAirline");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.OpenSkyToken", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.OpenSkyUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.OpenSkyUser", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Airline", "Airline")
                        .WithMany("Members")
                        .HasForeignKey("AirlineICAO");

                    b.Navigation("Airline");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Payload", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Aircraft", "Aircraft")
                        .WithMany("Payloads")
                        .HasForeignKey("AircraftRegistry");

                    b.HasOne("OpenSky.API.DbModel.Airport", "Airport")
                        .WithMany("Payloads")
                        .HasForeignKey("AirportICAO");

                    b.HasOne("OpenSky.API.DbModel.Airport", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationICAO");

                    b.HasOne("OpenSky.API.DbModel.Job", "Job")
                        .WithMany("Payloads")
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Airport");

                    b.Navigation("Destination");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Runway", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Airport", "Airport")
                        .WithMany("Runways")
                        .HasForeignKey("AirportICAO")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.RunwayEnd", b =>
                {
                    b.HasOne("OpenSky.API.DbModel.Runway", "Runway")
                        .WithMany("RunwayEnds")
                        .HasForeignKey("RunwayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Runway");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Aircraft", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Payloads");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.AircraftType", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Airline", b =>
                {
                    b.Navigation("FinancialRecords");

                    b.Navigation("Flights");

                    b.Navigation("Members");

                    b.Navigation("ShareHolders");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Airport", b =>
                {
                    b.Navigation("Approaches");

                    b.Navigation("Jobs");

                    b.Navigation("Payloads");

                    b.Navigation("Runways");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.FinancialRecord", b =>
                {
                    b.Navigation("ChildRecords");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Flight", b =>
                {
                    b.Navigation("FlightPayloads");

                    b.Navigation("NavlogFixes");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Job", b =>
                {
                    b.Navigation("Payloads");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.OpenSkyUser", b =>
                {
                    b.Navigation("AirlineDispatcherAssignments");

                    b.Navigation("AirlinePermissions");

                    b.Navigation("AirlinePilotAssignments");

                    b.Navigation("Dispatches");

                    b.Navigation("FinancialRecords");

                    b.Navigation("Flights");

                    b.Navigation("Jobs");

                    b.Navigation("ShareHoldings");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Payload", b =>
                {
                    b.Navigation("FlightPayloads");
                });

            modelBuilder.Entity("OpenSky.API.DbModel.Runway", b =>
                {
                    b.Navigation("RunwayEnds");
                });
#pragma warning restore 612, 618
        }
    }
}
